// Code generated by MockGen. DO NOT EDIT.
// Source: path/to/your/project/club_hub_port.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	
	"github.com/unawaretub86/club-hub/src/core/domain"
)

// MockWebPort is a mock of ClubHubPort interface.
type MockWebPort struct {
	ctrl     *gomock.Controller
	recorder *MockWebPortMockRecorder
}

// MockWebPortMockRecorder is the mock recorder for MockWebPort.
type MockWebPortMockRecorder struct {
	mock *MockWebPort
}

// NewMockWebPort creates a new mock instance.
func NewMockWebPort(ctrl *gomock.Controller) *MockWebPort {
	mock := &MockWebPort{ctrl: ctrl}
	mock.recorder = &MockWebPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebPort) EXPECT() *MockWebPortMockRecorder {
	return m.recorder
}

// SaveCompany mocks base method.
func (m *MockWebPort) SaveCompany(company domain.Company) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCompany", company)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany mocks base method.
func (m *MockWebPort) GetCompany(params map[string]string) (domain.Companies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", params)
	ret0, _ := ret[0].(domain.Companies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompany mocks base method.
func (m *MockWebPort) UpdateCompany(id uint, company domain.Company) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", id, company)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByFranchise mocks base method.
func (m *MockWebPort) GetCompanyByFranchise(params map[string]string) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByFranchise", params)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByInformation mocks base method.
func (m *MockWebPort) GetCompanyByInformation(params map[string]string) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByInformation", params)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByOwner mocks base method.
func (m *MockWebPort) GetCompanyByOwner(params map[string]string) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByOwner", params)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCompany indicates an expected call of SaveCompany.
func (mr *MockWebPortMockRecorder) SaveCompany(company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCompany", reflect.TypeOf((*MockWebPort)(nil).SaveCompany), company)
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockWebPortMockRecorder) GetCompany(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockWebPort)(nil).GetCompany), params)
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockWebPortMockRecorder) UpdateCompany(id interface{}, company interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockWebPort)(nil).UpdateCompany), id, company)
}

// GetCompanyByFranchise indicates an expected call of GetCompanyByFranchise.
func (mr *MockWebPortMockRecorder) GetCompanyByFranchise(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByFranchise", reflect.TypeOf((*MockWebPort)(nil).GetCompanyByFranchise), params)
}

// GetCompanyByInformation indicates an expected call of GetCompanyByInformation.
func (mr *MockWebPortMockRecorder) GetCompanyByInformation(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByInformation", reflect.TypeOf((*MockWebPort)(nil).GetCompanyByInformation), params)
}

// GetCompanyByOwner indicates an expected call of GetCompanyByOwner.
func (mr *MockWebPortMockRecorder) GetCompanyByOwner(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByOwner", reflect.TypeOf((*MockWebPort)(nil).GetCompanyByOwner), params)
}
